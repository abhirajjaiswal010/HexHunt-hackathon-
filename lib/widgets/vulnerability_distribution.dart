import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:provider/provider.dart';
import '../providers/scan_data_provider.dart';
import 'dart:math';

class VulnerabilityDistribution extends StatelessWidget {
  const VulnerabilityDistribution({super.key});

  // Toggle this to switch between the new radial chart and the old chart
  static const bool showRadialChart = true;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Consumer<ScanDataProvider>(
      builder: (context, scanData, _) {
        return Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: theme.cardColor,
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Vulnerability Distribution',
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 16),
              Expanded(
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    if (showRadialChart) {
                      // Responsive: Row for wide, Column for narrow
                      if (constraints.maxWidth > 600) {
                        return Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Expanded(
                              flex: 2,
                              child: _buildRadialBarChart(scanData, theme),
                            ),
                            const SizedBox(width: 48), // Space between chart and legend
                            Expanded(
                              flex: 1,
                              child: Center(child: _buildLegend(scanData, theme)),
                            ),
                          ],
                        );
                      } else {
                        return Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            _buildRadialBarChart(scanData, theme),
                            const SizedBox(height: 32),
                            _buildLegend(scanData, theme),
                          ],
                        );
                      }
                    } else {
                      // Old Chart
                      return constraints.maxWidth < 600
                          ? Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                SizedBox(
                                  height: 200,
                                  child: PieChart(
                                    PieChartData(
                                      sectionsSpace: 2,
                                      centerSpaceRadius: 40,
                                      sections: _buildPieChartSections(scanData, theme),
                                    ),
                                  ),
                                ),
                                const SizedBox(height: 24),
                                _buildLegend(scanData, theme),
                              ],
                            )
                          : Center(
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  SizedBox(
                                    width: 250,
                                    height: 250,
                                    child: PieChart(
                                      PieChartData(
                                        sectionsSpace: 2,
                                        centerSpaceRadius: 80,
                                        sections: _buildPieChartSections(scanData, theme),
                                      ),
                                    ),
                                  ),
                                  const SizedBox(width: 100),
                                  _buildLegend(scanData, theme),
                                ],
                              ),
                            );
                    }
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

// New Radial Bar Chart Implementation
Widget _buildRadialBarChart(ScanDataProvider scanData, ThemeData theme) {
  final data = [
    scanData.vulnerabilityDistribution['Critical']?.toDouble() ?? 0,
    scanData.vulnerabilityDistribution['High']?.toDouble() ?? 0,
    scanData.vulnerabilityDistribution['Medium']?.toDouble() ?? 0,
    scanData.vulnerabilityDistribution['Low']?.toDouble() ?? 0,
  ];
  final total = data.fold(0.0, (a, b) => a + b);
  final colors = [
    theme.colorScheme.error,
    theme.colorScheme.error.withOpacity(0.8),
    theme.colorScheme.secondary,
    theme.colorScheme.primary,
  ];
  final labels = ['Critical', 'High', 'Medium', 'Low'];
  final radii = [120.0, 100.0, 80.0, 60.0];
  final arcThickness = 18.0;
  final backgroundColor = theme.dividerColor.withOpacity(0.08);
  final percentages = data.map((d) => total == 0 ? 0.0 : d / total).toList();
  final angles = percentages.map((p) => p * 270).toList(); // 270deg sweep

  return Center(
    child: LayoutBuilder(
      builder: (context, constraints) {
        final size = min(constraints.maxWidth, constraints.maxHeight);
        return Stack(
          alignment: Alignment.center,
          children: [
            CustomPaint(
              size: Size(size, size),
              painter: _RadialBarPainter(
                percentages: percentages,
                colors: colors,
                radii: radii,
                arcThickness: arcThickness,
                backgroundColor: backgroundColor,
              ),
            ),
            // Add label and percentage at the end of each arc
            for (int i = 0; i < data.length; i++)
              if (percentages[i] > 0)
                _buildArcLabel(
                  radius: radii[i],
                  arcThickness: arcThickness,
                  angle: 270 + angles[i], // End angle
                  color: colors[i],
                  label: labels[i],
                  percent: (percentages[i] * 100).toStringAsFixed(0),
                  theme: theme,
                  size: size,
                ),
          ],
        );
      },
    ),
  );
}

// Custom painter for radial bars
class _RadialBarPainter extends CustomPainter {
  final List<double> percentages;
  final List<Color> colors;
  final List<double> radii;
  final double arcThickness;
  final Color backgroundColor;

  _RadialBarPainter({
    required this.percentages,
    required this.colors,
    required this.radii,
    required this.arcThickness,
    required this.backgroundColor,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    for (int i = 0; i < radii.length; i++) {
      final rect = Rect.fromCircle(center: center, radius: radii[i]);
      final startAngle = -pi / 2; // 270deg, top
      final sweepAngle = 3 * pi / 2; // 270deg
      // Draw background arc
      final bgPaint = Paint()
        ..color = backgroundColor
        ..style = PaintingStyle.stroke
        ..strokeWidth = arcThickness;
      canvas.drawArc(rect, startAngle, sweepAngle, false, bgPaint);
      // Draw value arc
      final valuePaint = Paint()
        ..color = colors[i]
        ..style = PaintingStyle.stroke
        ..strokeCap = StrokeCap.round
        ..strokeWidth = arcThickness;
      canvas.drawArc(rect, startAngle, sweepAngle * percentages[i], false, valuePaint);
      // Draw a circle at the start of the arc
      if (percentages[i] > 0) {
        final startX = center.dx + radii[i] * cos(startAngle);
        final startY = center.dy + radii[i] * sin(startAngle);
        final capPaint = Paint()
          ..color = colors[i]
          ..style = PaintingStyle.fill;
        canvas.drawCircle(Offset(startX, startY), arcThickness / 2, capPaint);
        // Draw a circle at the end of the arc
        final endAngle = startAngle + sweepAngle * percentages[i];
        final endX = center.dx + radii[i] * cos(endAngle);
        final endY = center.dy + radii[i] * sin(endAngle);
        canvas.drawCircle(Offset(endX, endY), arcThickness / 2, capPaint);
      }
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

List<PieChartSectionData> _buildPieChartSections(ScanDataProvider scanData, ThemeData theme) {
  return [
    PieChartSectionData(
      value: scanData.vulnerabilityDistribution['Critical'] ?? 0,
      color: theme.colorScheme.error,
      title: '${scanData.vulnerabilityDistribution['Critical']?.round()}%',
      radius: 80,
      titleStyle: TextStyle(
        color: theme.colorScheme.onError,
        fontSize: 15,
        fontWeight: FontWeight.bold,
      ),
    ),
    PieChartSectionData(
      value: scanData.vulnerabilityDistribution['High'] ?? 0,
      color: theme.colorScheme.error.withOpacity(0.8),
      title: '${scanData.vulnerabilityDistribution['High']?.round()}%',
      radius: 80,
      titleStyle: TextStyle(
        color: theme.colorScheme.onError,
        fontSize: 15,
        fontWeight: FontWeight.bold,
      ),
    ),
    PieChartSectionData(
      value: scanData.vulnerabilityDistribution['Medium'] ?? 0,
      color: theme.colorScheme.secondary,
      title: '${scanData.vulnerabilityDistribution['Medium']?.round()}%',
      radius: 80,
      titleStyle: TextStyle(
        color: theme.colorScheme.onSecondary,
        fontSize: 15,
        fontWeight: FontWeight.bold,
      ),
    ),
    PieChartSectionData(
      value: scanData.vulnerabilityDistribution['Low'] ?? 0,
      color: theme.colorScheme.primary,
      title: '${scanData.vulnerabilityDistribution['Low']?.round()}%',
      radius: 80,
      titleStyle: TextStyle(
        color: theme.colorScheme.onPrimary,
        fontSize: 15,
        fontWeight: FontWeight.bold,
      ),
    ),
  ];
}

Widget _buildLegend(ScanDataProvider scanData, ThemeData theme) {
  return Column(
    mainAxisAlignment: MainAxisAlignment.center,
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      _buildLegendItem('Critical', theme.colorScheme.error,
          '${scanData.vulnerabilityDistribution['Critical']?.round()}%', theme),
      const SizedBox(height: 16),
      _buildLegendItem('High', theme.colorScheme.error.withOpacity(0.8),
          '${scanData.vulnerabilityDistribution['High']?.round()}%', theme),
      const SizedBox(height: 16),
      _buildLegendItem('Medium', theme.colorScheme.secondary,
          '${scanData.vulnerabilityDistribution['Medium']?.round()}%', theme),
      const SizedBox(height: 16),
      _buildLegendItem('Low', theme.colorScheme.primary,
          '${scanData.vulnerabilityDistribution['Low']?.round()}%', theme),
    ],
  );
}

Widget _buildLegendItem(String label, Color color, String percentage, ThemeData theme) {
  return Row(
    mainAxisSize: MainAxisSize.min,
    children: [
      Container(
        width: 12,
        height: 12,
        decoration: BoxDecoration(
          color: color,
          shape: BoxShape.circle,
        ),
      ),
      const SizedBox(width: 8),
      Text(
        label,
        style: theme.textTheme.bodyLarge?.copyWith(
          color: theme.textTheme.bodyLarge?.color?.withOpacity(0.7),
        ),
      ),
      const SizedBox(width: 8),
      Text(
        percentage,
        style: theme.textTheme.bodyLarge?.copyWith(
          fontWeight: FontWeight.bold,
        ),
      ),
    ],
  );
}

// Add this helper after _RadialBarPainter
Widget _buildArcLabel({
  required double radius,
  required double arcThickness,
  required double angle, // degrees
  required Color color,
  required String label, // unused now
  required String percent,
  required ThemeData theme,
  required double size,
}) {
  final radians = (angle - 90) * pi / 180.0;
  final r = radius + arcThickness * 1.3; // Place just outside the arc
  final x = (size / 2) + r * cos(radians);
  final y = (size / 2) + r * sin(radians);

  final textSpan = TextSpan(
    text: '$percent%',
    style: theme.textTheme.bodyMedium?.copyWith(
      fontWeight: FontWeight.bold,
      color: color,
      fontSize: 10,
    ),
  );
  final textPainter = TextPainter(
    text: textSpan,
    textDirection: TextDirection.ltr,
  )..layout();

  final textWidth = textPainter.width;
  final textHeight = textPainter.height;

  return Positioned(
    left: x - textWidth / 2,
    top: y - textHeight / 2,
    child: Text(
      '$percent%',
      style: theme.textTheme.bodyMedium?.copyWith(
        fontWeight: FontWeight.bold,
        color: color,
        fontSize: 12,
      ),
    ),
  );
}
