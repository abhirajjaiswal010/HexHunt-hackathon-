import 'package:flutter/material.dart';
import '../themes/app_theme.dart';

/// Represents the severity level of a vulnerability
enum VulnerabilitySeverity {
  critical,
  high,
  medium,
  low,
}

/// A card widget for displaying vulnerability information
class VulnerabilityCard extends StatelessWidget {
  /// The title of the vulnerability
  final String title;
  
  /// Brief description of the vulnerability
  final String description;
  
  /// The severity level of the vulnerability
  final VulnerabilitySeverity severity;
  
  /// Optional timestamp for when the vulnerability was detected
  final DateTime? detectedAt;
  
  /// Optional percentage value representing risk or confidence
  final double? percentage;
  
  /// Optional callback when the card is tapped
  final VoidCallback? onTap;
  
  /// Optional additional actions for the card
  final List<Widget>? actions;
  
  const VulnerabilityCard({
    Key? key,
    required this.title,
    required this.description,
    required this.severity,
    this.detectedAt,
    this.percentage,
    this.onTap,
    this.actions,
  }) : super(key: key);
  
  /// Get the appropriate color for the severity level
  Color getSeverityColor(BuildContext context) {
    switch (severity) {
      case VulnerabilitySeverity.critical:
        return AppTheme.criticalColor;
      case VulnerabilitySeverity.high:
        return AppTheme.highColor;
      case VulnerabilitySeverity.medium:
        return AppTheme.mediumColor;
      case VulnerabilitySeverity.low:
        return AppTheme.lowColor;
    }
  }
  
  /// Get the severity label text
  String getSeverityText() {
    switch (severity) {
      case VulnerabilitySeverity.critical:
        return 'Critical';
      case VulnerabilitySeverity.high:
        return 'High';
      case VulnerabilitySeverity.medium:
        return 'Medium';
      case VulnerabilitySeverity.low:
        return 'Low';
    }
  }
  
  /// Get the icon for the severity level
  IconData getSeverityIcon() {
    switch (severity) {
      case VulnerabilitySeverity.critical:
        return Icons.error;
      case VulnerabilitySeverity.high:
        return Icons.warning;
      case VulnerabilitySeverity.medium:
        return Icons.info;
      case VulnerabilitySeverity.low:
        return Icons.check_circle;
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final severityColor = getSeverityColor(context);
    
    return Card(
      clipBehavior: Clip.antiAlias,
      elevation: 2,
      color: theme.cardColor,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8.0),
        side: BorderSide(color: severityColor.withOpacity(0.3), width: 1.0),
      ),
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(getSeverityIcon(), color: severityColor),
                  const SizedBox(width: 8),
                  Text(
                    getSeverityText(),
                    style: theme.textTheme.titleSmall?.copyWith(
                      color: severityColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  if (detectedAt != null) ...[
                    const SizedBox(width: 12),
                    Text(
                      '${detectedAt!.toLocal()}',
                      style: theme.textTheme.bodySmall,
                    ),
                  ]
                ],
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: theme.textTheme.bodyMedium,
              ),
              if (percentage != null) ...[
                const SizedBox(height: 8),
                LinearProgressIndicator(
                  value: percentage! / 100,
                  backgroundColor: severityColor.withOpacity(0.2),
                  valueColor: AlwaysStoppedAnimation<Color>(severityColor),
                ),
              ],
              if (actions != null) ...[
                const SizedBox(height: 8),
                Row(children: actions!),
              ],
            ],
          ),
        ),
      ),
    );
  }
  
  /// Format a date for display
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays == 0) {
      if (difference.inHours == 0) {
        return '${difference.inMinutes} minutes ago';
      }
      return '${difference.inHours} hours ago';
    } else if (difference.inDays < 7) {
      return '${difference.inDays} days ago';
    } else {
      return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
    }
  }
} 
